// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using backend.db;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(SKADIDBContext))]
    [Migration("20220205214302_added refresh token table")]
    partial class addedrefreshtokentable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("backend.model.Enterprise", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Userid")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("cnpj")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("stateregistration")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("telephone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.HasIndex("Userid");

                    b.ToTable("Enterprise");
                });

            modelBuilder.Entity("backend.model.EnterpriseUser", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("idEnterprise")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("idUser")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.ToTable("EnterpriseUsers");
                });

            modelBuilder.Entity("backend.model.User", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("emailConfirmation")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("backend.refreshtoken.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("JwtId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("backend.model.Enterprise", b =>
                {
                    b.HasOne("backend.model.User", null)
                        .WithMany("enterprises")
                        .HasForeignKey("Userid");

                    b.OwnsOne("backend.model.NameEnterprise", "settings", b1 =>
                        {
                            b1.Property<string>("Enterpriseid")
                                .HasColumnType("varchar(255)");

                            b1.Property<string>("name")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("namefantasy")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("slug")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.HasKey("Enterpriseid");

                            b1.ToTable("Enterprise");

                            b1.WithOwner()
                                .HasForeignKey("Enterpriseid");
                        });

                    b.Navigation("settings")
                        .IsRequired();
                });

            modelBuilder.Entity("backend.refreshtoken.RefreshToken", b =>
                {
                    b.HasOne("backend.model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.model.User", b =>
                {
                    b.Navigation("enterprises");
                });
#pragma warning restore 612, 618
        }
    }
}
